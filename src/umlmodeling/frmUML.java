/*
 * frmUML.java
 *
 * Created on November 4, 2008, 2:00 AM
 */

package umlmodeling;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.*;
import javax.swing.JPanel;
import java.awt.geom.*;
import java.io.*;
import javax.swing.JOptionPane;

public class frmUML extends javax.swing.JFrame {
    Vector classes=new Vector();    
    Vector useCaseObjects=new Vector();
    
    int curClass=0;   
    int ass1=-1, ass2=-1; //for association   
    int oass1=-1, oass2=-1; //for usecase association   
    
    Vector classAssociations=new Vector();
    Vector useCaseAssociations=new Vector();
    
    myJPanel pnlCanvas=new myJPanel();
    public Vector lines=new Vector();
    public class UseCaseObject{
        public String objectType="";
        public Object obj;
        public UseCaseObject(String _objectType, Object _obj){
            objectType=_objectType;
            obj=_obj;
        }
    }
    public frmUML(String _filename) {                
        this.add(pnlCanvas);
        initComponents();                
        pnlCanvas.setLayout(null);
        pnlCanvas.setBackground(Color.WHITE);
        pnlCanvas.setVisible(true);
        pnlCanvas.setBounds(0,20,2000,2000); 
        if(!_filename.equals("")){
            readFile(_filename);
            txtFileName.setText(_filename);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        cmdAddClass = new javax.swing.JButton();
        cmdActor = new javax.swing.JButton();
        cmdUseCase = new javax.swing.JButton();
        cmdAssociation = new javax.swing.JToggleButton();
        cmdGenerate = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        cmbAss = new java.awt.Choice();
        cmdDelAss = new javax.swing.JButton();
        jToolBar3 = new javax.swing.JToolBar();
        txtFileName = new javax.swing.JTextField();
        cmdSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        jToolBar1.setRollover(true);

        cmdAddClass.setText("New Class");
        cmdAddClass.setFocusable(false);
        cmdAddClass.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdAddClass.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdAddClass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAddClassActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdAddClass);

        cmdActor.setText("New Actor");
        cmdActor.setFocusable(false);
        cmdActor.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdActor.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdActorActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdActor);

        cmdUseCase.setText("New UseCase");
        cmdUseCase.setFocusable(false);
        cmdUseCase.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdUseCase.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdUseCase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdUseCaseActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdUseCase);

        cmdAssociation.setText("New Association");
        cmdAssociation.setFocusable(false);
        cmdAssociation.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdAssociation.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(cmdAssociation);

        cmdGenerate.setText("Generate Code");
        cmdGenerate.setFocusable(false);
        cmdGenerate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdGenerate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGenerateActionPerformed(evt);
            }
        });
        jToolBar1.add(cmdGenerate);

        getContentPane().add(jToolBar1);
        jToolBar1.setBounds(-10, 0, 490, 23);

        jToolBar2.setRollover(true);

        jLabel1.setText("Select Association:");
        jToolBar2.add(jLabel1);
        jToolBar2.add(cmbAss);

        cmdDelAss.setText("Delete");
        cmdDelAss.setFocusable(false);
        cmdDelAss.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdDelAss.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdDelAss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdDelAssActionPerformed(evt);
            }
        });
        jToolBar2.add(cmdDelAss);

        getContentPane().add(jToolBar2);
        jToolBar2.setBounds(710, 0, 240, 23);

        jToolBar3.setRollover(true);
        jToolBar3.add(txtFileName);

        cmdSave.setText("Save");
        cmdSave.setFocusable(false);
        cmdSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cmdSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cmdSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdSaveActionPerformed(evt);
            }
        });
        jToolBar3.add(cmdSave);

        getContentPane().add(jToolBar3);
        jToolBar3.setBounds(530, 0, 170, 20);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-976)/2, (screenSize.height-518)/2, 976, 518);
    }// </editor-fold>//GEN-END:initComponents
class association{
    public int classID1=0, classID2=0;   
    
}        
class useCaseAssociation{
    public int useCaseID1=0, useCaseID2=0;       
}       

void associateModelClass(ModelClass m){
                m.addMouseMotionListener(new MouseMotionListener() {
                public void mouseDragged(MouseEvent e) {               
                    ModelClass cur=(ModelClass)e.getComponent();
                    deactivateAll();
                    cur.activate();
                    drawAssociations();
                    //pnlCanvas.repaint();
                    //drawAssociations();
                }

                public void mouseMoved(MouseEvent e) {  
                    
                }
        });
            
            m.addMouseListener(new MouseListener() {
            public void mouseClicked(MouseEvent e) {
                
                deactivateAll();
                ModelClass cur=(ModelClass)e.getComponent();
                cur.activate();
                drawAssociations();
                if(cmdAssociation.isSelected()){                                                            
                    if(ass1==-1){
                        ass1=cur.id;
                     }
                    else{
                        ass2=cur.id;
                        association a=new association();
                        a.classID1=ass1;
                        a.classID2=ass2;
                        classAssociations.add(a);        
                        drawAssociations();
                        cmdAssociation.setSelected(false);
                        ass1=-1;
                        ass2=-1;
                    }                    
                }
            }

            
           
            
            public void mousePressed(MouseEvent e) {
                //drawAssociations();
            }

            public void mouseReleased(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            public void mouseEntered(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }

            public void mouseExited(MouseEvent e) {
                //throw new UnsupportedOperationException("Not supported yet.");
            }
        });
}

    private void cmdAddClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAddClassActionPerformed
        // TODO add your handling code here:       
            ModelClass m=new ModelClass("<New Class>");
            pnlCanvas.add(m);            
            m.setBounds(0,0,150,100);
            m.setVisible(true);
            m.Variables.add("");
            m.Variables.add("");        
            m.Variables.add("");
            m.Variables.add("");
            m.Variables.add("");
            m.id=classes.size();
            associateModelClass(m);
            m.initialize();      
            classes.add(m);
    }//GEN-LAST:event_cmdAddClassActionPerformed

    private void cmdDelAssActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdDelAssActionPerformed
        // TODO add your handling code here:
        if(cmbAss.getSelectedIndex()==-1)
            return;
        int curAss=Integer.parseInt(cmbAss.getSelectedItem());
        classAssociations.removeElementAt(curAss);
        drawAssociations();
    }//GEN-LAST:event_cmdDelAssActionPerformed

    void associateActor(Actor a){
        a.addMouseMotionListener(new MouseMotionListener() {

            public void mouseDragged(MouseEvent e) {
                drawAssociations();
            }

            public void mouseMoved(MouseEvent e) {
                
            }
        });
        
        a.addMouseListener(new MouseListener() {

            public void mouseClicked(MouseEvent e) {
                Actor act=(Actor)e.getComponent();
                if(cmdAssociation.isSelected()){
                    if(oass1==-1){
                        oass1=act.id;                    
                    }
                    else{
                        if(oass1==act.id)
                            return;
                        oass2=act.id;
                        useCaseAssociation uca=new useCaseAssociation();
                        uca.useCaseID1=oass1;
                        uca.useCaseID2=oass2;
                        useCaseAssociations.add(uca);
                        cmdAssociation.setSelected(false);
                        oass1=-1;
                        oass2=-1;
                        drawAssociations();
                        
                    }
                }
            }

            public void mousePressed(MouseEvent e) {
                
            }

            public void mouseReleased(MouseEvent e) {
                
            }

            public void mouseEntered(MouseEvent e) {
                
            }

            public void mouseExited(MouseEvent e) {
                
            }
        });
    }
    
    void associateUseCase(UseCase u){
        u.addMouseMotionListener(new MouseMotionListener() {
            public void mouseDragged(MouseEvent e) {
                drawAssociations();
            }

            public void mouseMoved(MouseEvent e) {
                
            }
        });
        u.addMouseListener(new MouseListener() {
            public void mouseClicked(MouseEvent e) {
                UseCase uc=(UseCase)e.getComponent();
                if(cmdAssociation.isSelected()){
                    if(oass1==-1){
                        oass1=uc.id;                    
                    }
                    else{
                        if(oass1==uc.id)
                            return;
                        oass2=uc.id;
                        useCaseAssociation uca=new useCaseAssociation();
                        uca.useCaseID1=oass1;
                        uca.useCaseID2=oass2;
                        useCaseAssociations.add(uca);
                        oass1=-1;
                        oass2=-1;
                        cmdAssociation.setSelected(false);
                    }
                    drawAssociations();
                }
            }

            public void mousePressed(MouseEvent e) {
                
            }

            public void mouseReleased(MouseEvent e) {
                
            }

            public void mouseEntered(MouseEvent e) {
                
            }

            public void mouseExited(MouseEvent e) {
                
            }
        });
    }
    
    private void cmdActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdActorActionPerformed
        // TODO add your handling code here:
        Actor a=new Actor();        
        a.setBounds(0,0,63,146);
        pnlCanvas.add(a);
        drawAssociations();
        a.setVisible(true);
        a.id=useCaseObjects.size();
        associateActor(a);        
        UseCaseObject uco=new UseCaseObject("A",a);
        useCaseObjects.add(uco);
    }//GEN-LAST:event_cmdActorActionPerformed

    private void cmdUseCaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdUseCaseActionPerformed
        // TODO add your handling code here:
        UseCase u=new UseCase();        
        u.setBounds(0,0,276,72);
        pnlCanvas.add(u);
        drawAssociations();
        u.setVisible(true);
        u.id=useCaseObjects.size();
        associateUseCase(u);
        UseCaseObject uco=new UseCaseObject("U",u);
        useCaseObjects.add(uco);
    }//GEN-LAST:event_cmdUseCaseActionPerformed

    private void cmdSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdSaveActionPerformed
        // TODO add your handling code here:
        if(txtFileName.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Please enter a valid file name!");
            return;
        }
        File f=new File(txtFileName.getText());
        String path=f.getPath();
        path=path.substring(0,path.lastIndexOf("\\"));
        File d=new File(path);
        if(!d.exists()){
            JOptionPane.showMessageDialog(this, "Path does not exsist!");
            return;
        }
        System.out.println();
        saveFile(txtFileName.getText());
        
    }//GEN-LAST:event_cmdSaveActionPerformed

    private void cmdGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGenerateActionPerformed
        // TODO add your handling code here:
        //Generating the code output
        String output="";
        for(int i=0;i<classes.size();i++){
            ModelClass c=(ModelClass)classes.get(i);
            c.updateVariables();     
            String classExtends = "";
            for(int j=0;j<classAssociations.size();j++){
                association ass=(association)classAssociations.get(j);
                if(c.id == ass.classID2){
                    for (int k = 0; k < classes.size(); k++) {
                        ModelClass cls = (ModelClass)classes.get(k);
                        if(cls.id == ass.classID1){
                            classExtends = cls.ClassName;
                            break;
                        }
                    }
                    break;
                }
            }
            
            output+="//Class begin " + c.ClassName + "\n";
            if(classExtends.equals(""))
                output+="class " + c.ClassName + "{" + "\n"; //begin the class
            else
                output+="class " + c.ClassName + " extends " + classExtends + "{" + "\n"; //begin the class
            for(int j=0;j<c.Variables.size();j++){
                
                String curVariable=c.Variables.get(j).toString();                    
                if(curVariable.equals("")){
                    continue;
                }
                if(curVariable.indexOf("(")!=-1){
                    output+=getTabs(1) + curVariable + "{" + "\n";
                    output+=getTabs(2) + "//TODO Define method here" + "\n";                            
                    output+=getTabs(1) + "}" + "\n";
                }
                else{
                    if(curVariable.startsWith("String")){
                        output+=getTabs(1) + curVariable + " = " + "\"\";" + "\n";
                    }
                    else if(curVariable.startsWith("int")){
                        output+=getTabs(1) + curVariable + " = " + "0;" + "\n";
                    }
                    else if(curVariable.startsWith("int")){
                        output+=getTabs(1) + curVariable + " = " + "0;" + "\n";
                    }
                    else{
                        output+=getTabs(1) + curVariable + ";" + "\n";
                    }
                }
            }
            output+= "}" + "\n"; //class ending bracket
        }
        frmCode frm=new frmCode(output);
        frm.setVisible(true);
    }//GEN-LAST:event_cmdGenerateActionPerformed
    public String getTabs(int val){
        String tabs="";
        for(int i=0;i<val;i++){
            tabs+="    ";
        }
        return tabs;
    }
    void saveFile(String fileName){
        try{
            Writer output=new BufferedWriter(new FileWriter(fileName));
            //writing the UseCase objects first
            for(int i=0;i<useCaseObjects.size();i++){
                UseCaseObject obj=(UseCaseObject)useCaseObjects.get(i);
                if(obj.objectType.equals("A")){
                    Actor act=(Actor)obj.obj;
                    output.write("A," + act.getX() + "," + act.getY()+"," + act.txt.getText() + "\n");
                }
                else{
                    UseCase uc=(UseCase)obj.obj;
                    output.write("U," + uc.getX() + "," + uc.getY()+"," + uc.txt.getText() + "\n");
                }                
            }
            //writing usecase associations
            for(int i=0;i<useCaseAssociations.size();i++){
                useCaseAssociation uca=(useCaseAssociation)useCaseAssociations.get(i);
                output.write("UCA," + uca.useCaseID1 + "," + uca.useCaseID2 + "\n");
            }
            //writing Model Classes
            for(int i=0;i<classes.size();i++){
                ModelClass m=(ModelClass)classes.get(i);
                String vars="";
                m.updateVariables();
                for(int j=0;j<m.Variables.size();j++){
                    vars+=m.Variables.get(j).toString() + ",";
                }
                if(vars.length()>0){
                    vars=vars.substring(0,vars.length()-1);
                }
                output.write("MC," + m.getX() + "," + m.getY() + "," + m.ClassName + "," + vars + "\n");
            }
            //writing class associations
            for(int i=0;i<classAssociations.size();i++){
                association ass=(association)classAssociations.get(i);
                output.write("CA," + ass.classID1 + "," + ass.classID2 + "\n");
            }
            output.close();
        }
        catch(IOException ex){
            System.out.println(ex.getMessage());
        }
    }
    
    void readFile(String fileName){
        try{
            String line="";
            BufferedReader input =new BufferedReader(new FileReader(fileName));
            while (( line = input.readLine()) != null){
                if(!line.trim().equals("")){
                    StringTokenizer toks =new StringTokenizer(line,",");
                    Vector tokens=new Vector();                    
                    while(toks.hasMoreTokens()){
                        tokens.add(toks.nextToken());
                    }
                    if(tokens.get(0).equals("A")){ //An Actor found
                        Actor act=new Actor();
                        int x=Integer.parseInt(tokens.get(1).toString());
                        int y=Integer.parseInt(tokens.get(2).toString());
                        act.setBounds(x,y,63,146);
                        act.txt.setText(tokens.get(3).toString());
                        act.setVisible(true);
                        pnlCanvas.add(act);
                        act.id=useCaseObjects.size();
                        associateActor(act);
                        //adding it to the Object list
                        UseCaseObject obj=new UseCaseObject("A",act);
                        useCaseObjects.add(obj);
                    }
                    else if(tokens.get(0).equals("U")){                       
                        UseCase u=new UseCase();  
                        int x=Integer.parseInt(tokens.get(1).toString());
                        int y=Integer.parseInt(tokens.get(2).toString());
                        u.setBounds(x,y,276,72);
                        pnlCanvas.add(u);
                        drawAssociations();
                        u.setVisible(true);
                        u.id=useCaseObjects.size();
                        u.txt.setText(tokens.get(3).toString());
                        associateUseCase(u);
                        UseCaseObject uco=new UseCaseObject("U",u);                        
                        useCaseObjects.add(uco);
                    }
                    else if(tokens.get(0).equals("UCA")){                       
                        useCaseAssociation uca=new useCaseAssociation();
                        uca.useCaseID1=Integer.parseInt(tokens.get(1).toString());
                        uca.useCaseID2=Integer.parseInt(tokens.get(2).toString());
                        useCaseAssociations.add(uca);
                    }
                    else if(tokens.get(0).equals("MC")){                       
                        ModelClass m=new ModelClass(tokens.get(3).toString());
                        pnlCanvas.add(m);            
                        int x=Integer.parseInt(tokens.get(1).toString());
                        int y=Integer.parseInt(tokens.get(2).toString());
                        m.setBounds(x,y,150,100);
                        m.setVisible(true);
                        for(int i=4;i<tokens.size();i++){
                            m.Variables.add(tokens.get(i).toString());
                        }                        
                        m.id=classes.size();
                        associateModelClass(m);
                        m.initialize();      
                        classes.add(m);
                    }
                    else if(tokens.get(0).equals("CA")){                       
                        association uca=new association();
                        uca.classID1=Integer.parseInt(tokens.get(1).toString());
                        uca.classID2=Integer.parseInt(tokens.get(2).toString());
                        classAssociations.add(uca);
                    }
                }
                drawAssociations();
            }
        }
        catch(IOException ex){
            System.out.println(ex.getMessage());
        }                        
    }
    
    public class painter extends Thread{
        @Override
        public void run(){
            while(true){
                drawAssociations();
            }
        }
    }
    public void drawAssociations(){                
            
                pnlCanvas.repaint();
                cmbAss.removeAll();
                for(int i=0;i<classAssociations.size();i++){
                    cmbAss.add("" + i);
                }
                
            }
             void deactivateAll(){
            for(int i=0;i<classes.size();i++){
               ModelClass m=(ModelClass)classes.get(i);
               m.updateVariables();
               m.deActivate();
            }
            }    
    void saveUML(){
        for(int i=0;i<classes.size();i++){
           ModelClass m=(ModelClass)classes.get(i);
           m.updateVariables();
           for(int j=0;j<m.Variables.size();j++){
               System.out.println(m.Variables.get(j).toString());
           }
       }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmUML("").setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Choice cmbAss;
    private javax.swing.JButton cmdActor;
    private javax.swing.JButton cmdAddClass;
    private javax.swing.JToggleButton cmdAssociation;
    private javax.swing.JButton cmdDelAss;
    private javax.swing.JButton cmdGenerate;
    private javax.swing.JButton cmdSave;
    private javax.swing.JButton cmdUseCase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JTextField txtFileName;
    // End of variables declaration//GEN-END:variables
    public class myJPanel extends JPanel{
        @Override
        public void paint(Graphics g){
            super.paint(g);
            
            //creating class associations
            for(int i=0;i<classAssociations.size();i++){
                    lines.clear();
                    
                    association a=(association)classAssociations.get(i);                    
                    ModelClass m1=(ModelClass)classes.get(a.classID1);
                    ModelClass m2=(ModelClass)classes.get(a.classID2);
                    int x1=m1.getX() + (m1.getWidth()/2);
                    int x2=m2.getX() + (m2.getWidth()/2);
                    
                    int y1=m1.getY() + (m1.getHeight()/2);
                    int y2=m2.getY() + (m2.getHeight()/2);
                    if(x1>x2){
                        x1=m1.getX();
                        x2=m2.getX()+m2.getWidth();
                        g.drawString(i + "", x1-10,y1);
                    }
                    else{
                        x1=m1.getX()+m2.getWidth();
                        x2=m2.getX();
                        g.drawString(i + "", x1+10,y1);
                    }
                    g.setColor(Color.BLACK);
                    g.drawLine(x1,y1,x2,y2);                    
                    Line2D l=new Line2D.Double(x1,y1,x2,y2);
                    
                    lines.add(l);
                }
                //drawing usecase associations
                for(int i=0;i<useCaseAssociations.size();i++){
                    lines.clear();                    
                    useCaseAssociation a=(useCaseAssociation)useCaseAssociations.get(i);                    
                    
                    UseCaseObject m1=(UseCaseObject)useCaseObjects.get(a.useCaseID1);
                    UseCaseObject m2=(UseCaseObject)useCaseObjects.get(a.useCaseID2);
                    
                    int x1=0,x2=0,y1=0,y2=0;
                    
                    //fetching x1 and y1
                    if(m1.objectType.equals("A")){
                        Actor act=(Actor)m1.obj;                        
                        x1=act.getX() + (act.getWidth()/2);
                        y1=act.getY() + (act.getHeight()/2);
                    }
                    else{
                        UseCase uc=(UseCase)m1.obj;                        
                        x1=uc.getX() + (uc.getWidth()/2);
                        y1=uc.getY() + (uc.getHeight()/2);
                    }
                    
                    //fetching x2 and y2
                    if(m2.objectType.equals("A")){
                        Actor act=(Actor)m2.obj;
                        x2=act.getX() + (act.getWidth()/2);
                        y2=act.getY() + (act.getHeight()/2);
                    }
                    else{
                        UseCase uc=(UseCase)m2.obj;                        
                        x2=uc.getX() + (uc.getWidth()/2);
                        y2=uc.getY() + (uc.getHeight()/2);
                    }
                    
                    
                    //adjusting the line
                    if(x1>x2){
                        if(m1.objectType.equals("A")){
                            Actor act=(Actor)m1.obj;
                            x1=act.getX();
                        }
                        else{
                            UseCase uc=(UseCase)m1.obj;
                            x1=uc.getX();
                        }
                        if(m2.objectType.equals("A")){
                            Actor act=(Actor)m2.obj;
                            x2=act.getX()+act.getWidth();
                        }
                        else{
                            UseCase uc=(UseCase)m2.obj;
                            x2=uc.getX()+uc.getWidth();
                        }
                        g.drawString(i + "", x1-10,y1);
                    }
                    else{
                        if(m1.objectType.equals("A")){
                            Actor act=(Actor)m1.obj;
                            x1=act.getX()+act.getWidth();
                        }
                        else{
                            UseCase uc=(UseCase)m1.obj;
                            x1=uc.getX()+uc.getWidth();
                        }
                        if(m2.objectType.equals("A")){
                            Actor act=(Actor)m2.obj;
                            x2=act.getX();
                        }
                        else{
                            UseCase uc=(UseCase)m2.obj;
                            x2=uc.getX();
                        }
                        g.drawString(i + "", x1-10,y1);
                       
                    }
                    g.setColor(Color.BLACK);
                    g.drawLine(x1,y1,x2,y2);                    
                    Line2D l=new Line2D.Double(x1,y1,x2,y2);
                    
                    lines.add(l);
                }
            
        }
    }
}
